# name: test/sql/bounds.test
# description: test geography extension cell operations
# group: [geography]

# Require statement will ensure this test is run with this extension loaded
require geography

query I
SELECT s2_covering(s2_data_country('Fiji'));
----
[3/13002011, 3/1300232, 3/130030, 3/130031, 3/130033, 3/130100, 3/2032333, 3/20330000000]

query I
SELECT s2_covering_fixed_level(s2_data_country('Fiji'), 5);
----
[3/13002, 3/13003, 3/13010, 3/20323, 3/20330]

# Check optimization for the cell center geography
query I
SELECT s2_covering('POINT (-64 45)'::GEOGRAPHY::S2_CELL_CENTER);
----
[2/112230310012123001312232330210]

query I
SELECT s2_covering_fixed_level('POINT (-64 45)'::GEOGRAPHY::S2_CELL_CENTER, 5);
----
[2/11223]

statement error
SELECT s2_covering_fixed_level(geog, UNNEST([1, 2])) from s2_data_countries();
----
Invalid Input Error: s2_covering_fixed_level(): level must be a constant

# s2_bounds_box()
query I
SELECT s2_bounds_box(NULL) IS NULL;
----
true

# Check empty input optimization
query I
SELECT s2_bounds_box('POINT EMPTY'::GEOGRAPHY) IS NULL;
----
true

# Check point-as-cell-center optimization
query I
SELECT s2_cellfromlonlat(-64, 45).s2_bounds_box();
----
{'xmin': -63.99999997805, 'ymin': 45.0000000116166, 'xmax': -63.99999997805, 'ymax': 45.0000000116166}

# Check normal encoded geography
query I
SELECT s2_bounds_box('MULTIPOINT (0 1, 2 3)'::GEOGRAPHY);
----
{'xmin': 0.0, 'ymin': 1.0, 'xmax': 1.9999999999999996, 'ymax': 3.0000000000000004}

# s2_bounds_box_agg()

# Check empty input optimization
query I
SELECT s2_bounds_box_agg('POINT EMPTY'::GEOGRAPHY) IS NULL;
----
true

# Check point-as-cell-center optimization
query I
SELECT s2_bounds_box_agg(s2_cellfromlonlat(-64, 45));
----
{'xmin': -63.99999997805, 'ymin': 45.0000000116166, 'xmax': -63.99999997805, 'ymax': 45.0000000116166}

# Check normal encoded geography
query I
SELECT s2_bounds_box_agg('MULTIPOINT (0 1, 2 3)'::GEOGRAPHY);
----
{'xmin': 0.0, 'ymin': 1.0, 'xmax': 1.9999999999999996, 'ymax': 3.0000000000000004}

# With some actual aggregation
query I
SELECT s2_bounds_box_agg(geog) FROM s2_data_cities();
----
{'xmin': -123.12359, 'ymin': -41.29998789999999, 'xmax': -171.738642, 'ymax': 64.1500236}

query I
SELECT s2_bounds_box_agg(geog) FROM s2_data_countries();
----
{'xmin': -180.0, 'ymin': -90.0, 'xmax': 180.0, 'ymax': 83.64513000000002}


# Test the box exporters
query I
SELECT s2_bounds_box(s2_data_country('Germany')).s2_box_wkb().s2_geogfromwkb().s2_format(4);
----
POLYGON ((5.9887 47.3025, 15.017 47.3025, 15.017 54.9831, 5.9887 54.9831, 5.9887 47.3025))

query I
SELECT s2_bounds_box(s2_data_country('Fiji')).s2_box_wkb().s2_geogfromwkb().s2_format(4);
----
MULTIPOLYGON (((177.285 -18.288, 180 -18.288, 180 -16.0209, 177.285 -16.0209, 177.285 -18.288)), ((-180 -18.288, -179.7933 -18.288, -179.7933 -16.0209, -180 -16.0209, -180 -18.288)))

query I
SELECT s2_bounds_box(s2_data_country('Germany')).s2_box_struct();
----
{'xmin': 5.988658, 'ymin': 47.30248799999997, 'xmax': 15.016996000000002, 'ymax': 54.983104000000026}

# Test box constructor
query I
SELECT s2_box(5.989, 47.302, 15.017, 54.983);
----
{'xmin': 5.989, 'ymin': 47.302, 'xmax': 15.017, 'ymax': 54.983}

# s2_box_intersects()
query I
SELECT s2_box_intersects(s2_bounds_box(s2_data_country('Germany')), s2_bounds_box(s2_data_country('France')));
----
true

query I
SELECT s2_box_intersects(s2_bounds_box(s2_data_country('Germany')), s2_bounds_box(s2_data_country('Canada')));
----
false

# s2_box_union()
query I
SELECT s2_box_union(s2_box(0, 1, 2, 3), s2_box(4, 5, 6, 7));
----
{'xmin': 0.0, 'ymin': 1.0, 'xmax': 6.000000000000001, 'ymax': 7.0}

query I
SELECT s2_box_union(s2_box(179, 1, 180, 3), s2_box(-180, 5, -179, 7));
----
{'xmin': 179.0, 'ymin': 1.0, 'xmax': -179.0, 'ymax': 7.0}
