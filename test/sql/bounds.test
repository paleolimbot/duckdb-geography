# name: test/sql/bounds.test
# description: test geography extension cell operations
# group: [geography]

# Require statement will ensure this test is run with this extension loaded
require geography

query I
SELECT s2_covering(s2_data_country('Fiji'));
----
[3/13002011, 3/1300232, 3/130030, 3/130031, 3/130033, 3/130100, 3/2032333, 3/20330000000]

query I
SELECT s2_covering_fixed_level(s2_data_country('Fiji'), 5);
----
[3/13002, 3/13003, 3/13010, 3/20323, 3/20330]

# Check optimization for the cell center geography
query I
SELECT s2_covering('POINT (-64 45)'::GEOGRAPHY::S2_CELL_CENTER);
----
[2/112230310012123001312232330210]

query I
SELECT s2_covering_fixed_level('POINT (-64 45)'::GEOGRAPHY::S2_CELL_CENTER, 5);
----
[2/11223]

statement error
SELECT s2_covering_fixed_level(geog, UNNEST([1, 2])) from s2_data_countries();
----
Invalid Input Error: s2_covering_fixed_level(): level must be a constant

# s2_bounds_rect()
query I
SELECT s2_bounds_rect(NULL) IS NULL;
----
true

# Check empty input optimization
query I
SELECT s2_bounds_rect('POINT EMPTY'::GEOGRAPHY) IS NULL;
----
true

# Check point-as-cell-center optimization
query I
SELECT s2_cellfromlonlat(-64, 45).s2_bounds_rect();
----
{'xmin': -63.99999997805, 'ymin': 45.0000000116166, 'xmax': -63.99999997805, 'ymax': 45.0000000116166}

# Check normal encoded geography
query I
SELECT s2_bounds_rect('MULTIPOINT (0 1, 2 3)'::GEOGRAPHY);
----
{'xmin': 0.0, 'ymin': 1.0, 'xmax': 1.9999999999999996, 'ymax': 3.0000000000000004}

# s2_bounds_rect_agg()
# These results aren't really correct until I figure out how to either
# encode the result of an aggregate as a struct or change the storage of the
# box_lnglat to be a blob.

# Check empty input optimization
query I
SELECT s2_bounds_rect_agg('POINT EMPTY'::GEOGRAPHY) IS NULL;
----
true

# Check point-as-cell-center optimization
query I
SELECT s2_bounds_rect_agg(s2_cellfromlonlat(-64, 45));
----
[-64.000000, 45.000000, -64.000000, 45.000000]

# Check normal encoded geography
query I
SELECT s2_bounds_rect_agg('MULTIPOINT (0 1, 2 3)'::GEOGRAPHY);
----
[0.000000, 1.000000, 2.000000, 3.000000]

# With some actual aggregation
query I
SELECT s2_bounds_rect_agg(geog) FROM s2_data_cities();
----
[-123.123590, -41.299988, -171.738642, 64.150024]

query I
SELECT s2_bounds_rect_agg(geog) FROM s2_data_countries();
----
[-180.000000, -90.000000, 180.000000, 83.645130]
